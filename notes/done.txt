Calculator
  - Setup simple buttons X
  - Write JSON generator x
  - Result component x
  - Render x
- React-Router X
- Pass it to get() x
- Pass result to button x
- Render result with correct size x
- Fix styling to be flex
- Update routing to terminal app routing approach x
  - Call route get directly from button with button text that was clicked instead of history
- Move the if conditions to the route, why do we even need a machine? x
- Add prettier x
- Right now you can remove the `text` prop from the Button component in the route even though the component requires it
  - See if you can replace the WeakObj that is being used for props
- Type the remaining weakObj's for routes
- If we can rewrite ComponentData so we can instatiate it at the route level and say, these are the possible Components in this Route
  - We could narrow down the param types for the component
- Hook up route params to components
- Rename from routeParams -> routeState
- Remove sectionCount in utils/index.tsx
- Setup an event listener like in `shell` so you can call updates from the server
- Simulate doing a fetch and re-render x
- Simulate doing a fetch and re-render and update a button x
- pass routeStore to getStore so state is persisted unless cleared x
- abort fetch requests
  - fetches will require using a cache, but request id is stored on client
- Rename store -> session
- location.to and routing
- Test navigating to a different route
- Clicking navigate on first load fires 2 renders because input is not set yet
- Add onLeave cleanup
- Allow for button not with text AC x
  - action: clear
  - Route should accept state, session, action
  - Test just updating it to type, payload, store, session
- Add update command X
- If that doesn't work consider turning getState into a reducer /
  - I've decided to keep it as state first, it acts like a video game
  - You can also directly call update from the component
  - Actions are also available if needed

SDUI - Amazing how it works
- Immediate mode, encourages writing in a clean, functional way
- Focuses on the input/output
- Worrying about state, hooks, redux and machines not needed
- Cross platform

